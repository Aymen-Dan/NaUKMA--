'Set for work with pair+list
Calculus list
   '-- true    ===Boolean
   true = \ s z . s ;
   '--false  ===Boolean
   false = \ s z . z ;
   '--not  ===Boolean
   not = \ x . x false true  ;
   '--and  ===Boolean
   and = \ x y . x y false;
   '--or  ===Boolean 
   or = \ x y . x true y ;
   'pair  (a,b)  -- конструктор пари (a,b)  
   pair = \ a b  z . z a b ;
   'fst  (a,b)  = a  вибирає перший елемент пари (a,b)  
   fst = \ p . p true ;
   'snd  (a,b)  = b  вибирає другий елемент пари (a,b)  
   snd = \ p . p false;
   'succ n = n+1
   succ = \ x s z . s (x s z) ;
   'addition x y = x+y
   addition = \ x y . x succ y ;
   'isZero(0 )= true   isZero(n) = false n > 0
   isZero = \ x . x false not false;
   'predSS (n,n-1) = (n+1,n)
   predSS = \p . pair  (succ (fst p)) (fst p)  ;
   'pred(0) = 0, pred(n) = n-1, n>0
   pred = \n. snd (n predSS (pair 0 0)) ;
   'subtract (x,y) = if (x<y) then 0 else x-y
   subtract = \x y. y pred x;
   'if (x,y,z) = if x then y else z
   if = \x y z . x y z;
   '-- Fix point
   fix = \f . (\x.f(x x)) (\x.f(x x));
   'fibB (n) = if  (n < 2) then 1 else fibB (n-1) + fibB (n-2)
   fibB = \ r n . if (isZero (subtract n 1)) 1 (addition (r (pred n)) (r (pred (pred n))));
   'firRec(n) --- recursive fibB
   fibRec = fix fibB;
   'fibZZ = (0,1)
   fibZZ = pair 0 1;
   'fibSS (a,b)  = (b,a+b)
   fibSS = \p . pair (snd p) (addition (fst p) (snd p));
   'fib(n)  = in n<2 then 1 else fib(n-1)+ fib(n-2)
   fib = \n . snd (n fibSS fibZZ);
   'empty = []
   empty = \c z . z;
   'list1 = [1]
   list1 = \c z . c 1  z;
   'list3 = [2,0,2]
   list3 = \c z . c 2  (c 0  (c 2  z));
   'list5 = [9,7,5, 3,1]
   list5 = \c z . c 9  (c 7 (c 5 (c 3 (c 1  z))));
   'cons (a1, [a2,...,an]) = [a1, a2, ..., an] 
   cons = \a w x y . x a (w x y);
   'head [a1, a2,...,an] = a1 
   head = \ w . w true empty;
   'isEmpty(w) = w==[]
   isEmpty = \ w . w (\t . false) not false;
   'ZZw = ([],[])
   ZZw = pair empty empty;
   'SSw (b, ([a1,..an], [a2,..an])= ([b,a1,...an],[a1,...an])
   SSw = \ b p . pair (cons b (fst p)) (fst p);
   'tail [a1,a2, ...,an] =  [a2,..an])
   tail = \ w . snd ( w SSw ZZw);
   'sumB(w) = if (w=[]) then 0 else haid w + sumB( tail w)
   sumB = \r w. if (isEmpty w) 0 (addition (head w) (r (tail w)));
   'sumRec ---- recursive  sumB
   sumRec = fix sumB;
   'sumS([a1,...,an]) = a1+ ...+ an
   sumS = \ w . w addition 0 ;
end list
